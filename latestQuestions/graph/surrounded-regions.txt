https://leetcode.com/problems/surrounded-regions/description/

class Solution:
    def solve(self, board: List[List[str]]) -> None:
        """
        Do not return anything, modify board in-place instead.
        """
        
        m = len(board)
        n = len(board[0])
        visited = [[False for _ in range(n)] for _ in range(m)]

        def dfs(row, col):
            visited[row][col] = True

            delta_row = [-1, 0, 1, 0]
            delta_col = [0, 1, 0, -1]

            for idx in range(4):
                new_row = row + delta_row[idx]
                new_col = col + delta_col[idx]

                if 0 <= new_row < m and 0 <= new_col < n and not visited[new_row][new_col] and board[new_row][new_col] == "O":
                    dfs(new_row, new_col)   

        for i in range(m):
            for j in range(n):
                if i == 0 or j == 0 or i == m-1 or j == n-1:
                    if board[i][j] == "O":
                        dfs(i,j)

        
        for i in range(m):
            for j in range(n):
                if not visited[i][j] and board[i][j] == "O":
                    board[i][j] = "X"
