Given a binary array nums and an integer k, return the maximum number of consecutive 1's in the array if you can flip at most k 0's.
Example 1:

Input: nums = [1,1,1,0,0,0,1,1,1,1,0], k = 2
Output: 6
Explanation: [1,1,1,0,0,1,1,1,1,1,1]
Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.
Example 2:

Input: nums = [0,0,1,1,0,0,1,1,1,0,1,1,0,0,0,1,1,1,1], k = 3
Output: 10
Explanation: [0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1]
Bolded numbers were flipped from 0 to 1. The longest subarray is underlined.

O(2N) Solution :
class Solution:
    def longestOnes(self, nums: List[int], k: int) -> int:
        left, right = 0,0
        maxLength = 0
        zerosCount = 0

        while(right < len(nums)):
            
            if(nums[right] == 0):
                zerosCount+=1
                
            while zerosCount > k:
                if nums[left] == 0:
                    zerosCount-=1
                left+=1
            
            maxLength = max(maxLength, right - left + 1)
            right+=1
        return maxLength
            

O(N) Solution:
class Solution:
    def longestOnes(self, nums: List[int], k: int) -> int:
        left, right = 0,0
        maxLength = 0
        zerosCount = 0

        while(right < len(nums)):
            
            if(nums[right] == 0):
                zerosCount+=1
                
            if zerosCount > k:
                if nums[left] == 0:
                    zerosCount-=1
                left+=1
            
            if zerosCount<= k:
                maxLength = max(maxLength, right - left + 1)
            right+=1
        return maxLength
            
